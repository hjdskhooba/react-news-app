import React, { Component } from "react";
import { connect } from 'react-redux';
import * as R from "ramda";

import { fetchTopNews } from "actions";
import { getTopNews } from "selectors";

class HotTopics extends Component {
    componentDidMount(){
        this.props.fetchTopNews();
    }
    renderTopNews(item, idx){
        const slicedTitle = R.take(60, item.title);
        // Сделаю слайдер после того как добавлю отдельную страницу новости.
        return (
            <div key={idx} className="hot-topics__slide">
            <div className='hot-topics__news_body hot-left'>
                <img src={item.props.image} alt={item.props["image:alt"]} className="hot-img"/>
                <h3 className='hot-topics__news--title'>{slicedTitle}</h3>
                <div className='bottom'>
                    <p>{item.created_at}</p>
                    <p>{item.source}</p>
                </div>
            </div>
            <p className='hot-topics__news_descrition right desc'>
                {item.description}
            </p>
        </div>
        )
    }
    render(){
    const { top_news } = this.props;
    return (
    <div className='hot-topics news-page-topics mb-swiper'>
        <div className='container'>
            <div className='hot-topics__body'>
                <h1 className='hot-topics-title title'>Hot Topics</h1>
                <div className='hot-topics-main'>
                    <div className="hot-topics-main-in">
                    {
                    top_news.map((item, idx) => this.renderTopNews(item, idx))
                    }
                    </div>
                    <br/>
                        <br/>
                            this is slider with hot topics
                        <br/>
                    <br/>
                </div>
            </div>
        </div>
    </div>
  )}
}

const mapDispatchToProps = {
    fetchTopNews,
};

const mapStateToProps = state => ({
    top_news: getTopNews(state)
});

export default connect(mapStateToProps, mapDispatchToProps)(HotTopics);